# Configuration options, used by build systems and scripts.

#######################################################
# The values set here will also be used for releases! #
#######################################################

# The name that is advertised.
# Should be 4 characters or less.
BLUETOOTH_NAME=CRWN

# Firmware and bootloader version will be overwritten.
# At release, from the files: source/VERSION and source/bootloader/VERSION
# Else, by git hash.
FIRMWARE_VERSION=undefined
BOOTLOADER_VERSION=undefined

# Verbosity of the UART
# SERIAL_NONE                 0
# SERIAL_READ_ONLY            1
# SERIAL_BYTE_PROTOCOL_ONLY   2
# SERIAL_FATAL                3
# SERIAL_ERROR                4
# SERIAL_WARN                 5
# SERIAL_INFO                 6
# SERIAL_DEBUG                7
# SERIAL_VERBOSE              8
SERIAL_VERBOSITY=SERIAL_BYTE_PROTOCOL_ONLY

# Default uart mode.
# This can be changed via a bluetooth command.
# SERIAL_ENABLE_NONE         0
# SERIAL_ENABLE_RX_ONLY      1
# SERIAL_ENABLE_RX_AND_TX    3
CS_SERIAL_ENABLED=0

# Enable the binary protocol if you want to use a UART library.
# Disable the binary protocol if you want to use a serial communication program, like Minicom.
CS_UART_BINARY_PROTOCOL_ENABLED=1

# Use the NRF logger module, handy when debugging NRF modules.
# 0 to disable.
# 1 to use RTT for logging, so it can coexist with bluenet serial.
#   Only works when connected via JLink.
# 2 to use UART, this replaces bluenet serial, and thus breaks the binary protocol.
#   Also, the UART pin is then defined at compile time.
CS_SERIAL_NRF_LOG_ENABLED=0
CS_SERIAL_BOOTLOADER_NRF_LOG_ENABLED=0
CS_SERIAL_NRF_LOG_PIN_TX=6

# Default values for the UART client
UART_DEVICE="/dev/ttyACM0"
UART_BAUDRATE=230400

# The different boards that can be used (from cs_Boards.h):
# ## Nordic boards
# PCA10036             40
# PCA10040             41
# ## Guidestone
# GUIDESTONE           100
# ## Crownstone USB dongle
# CS_USB_DONGLE        200
# ## Crownstone Builtin
# ACR01B1A             1000
# ACR01B1B             1001
# ACR01B1C             1002
# ACR01B1D             1003
# ACR01B1E             1004
# ## Crownstone Builtin One
# ACR01B10B            1007
# ACR01B10D            1008
# ## Crownstone Plug
# ACR01B2A             1500
# ACR01B2B             1501
# ACR01B2C             1502
# ACR01B2E             1503
# ACR01B2G             1504
# ## Crownstone Plug One
# ACR01B11A            1505
HARDWARE_BOARD=PCA10040

# The default pin layout as defined by Nordic and used by the bootloader.
# Use PCA10040 for the nRF52832, and PCA10100 for the nRF52833.
NORDIC_HARDWARE_BOARD=PCA10040

# The default pin layout as defined by Nordic and used by the bootloader
NORDIC_HARDWARE_BOARD=PCA10040

# The default hardware board, in case no board is written in UICR.
# This value will then also be written to UICR.
DEFAULT_HARDWARE_BOARD=ACR01B2C

# Add reset counter at end of name
CHANGE_NAME_ON_RESET=0

# Add support for microapps
BUILD_MICROAPP_SUPPORT=0

# Enable i2c/twi
BUILD_TWI=0

# Enable nrfx gpiote driver (for GPIO pins)
BUILD_GPIOTE=0

# Add support for mesh topology research
BUILD_MESH_TOPOLOGY_RESEARCH=0

# Add support for tracking functionality w.r.t which crownstone is closest to a trackable device
BUILD_CLOSEST_CROWNSTONE_TRACKER=0

# Enables memory usage testing
BUILD_MEM_USAGE_TEST=0

# Compile the mesh code.
BUILD_MESHING=1

# Enable the mesh code.
MESHING=1

# Use the (active) scanner of the mesh.
MESH_SCANNER=1

# Build and use the mesh persistent storage
# 0 to disable.
# 1 to use the default: flash manager.
# 2 to use own implementation.
MESH_PERSISTENT_STORAGE=2

# Advertise iBeacon packets.
IBEACON=1

# Enable or disable interval scanner, will scann every
# SCAN_DURATION + SCAN_BREAK_DURATION ms, for SCAN_DURATION ms
INTERVAL_SCANNER_ENABLED=0

# Durations for the interval scanner in ms.
SCAN_DURATION=2000
SCAN_BREAK_DURATION=7000

# Default setting of dimming allowed.
DIMMING_ALLOWED=0

# The iBeacon advertisement packet parameters contains the proximity UUID, MAJOR, MINOR, AND RSSI value.
BEACON_UUID="a643423e-e175-4af0-a2e4-31e32f729a8a"
BEACON_MAJOR=0
BEACON_MINOR=0
BEACON_RSSI=0xC4

# Set to 1 to enable encryption of BLE (characteristics and advertisements).
ENCRYPTION=1

# Maximum number of vendor specific services
# NOTE: increasing this will also need to increase the RAM_R1_BASE
MAX_NUM_VS_SERVICES=2

# Size of master buffers.
# It should not be larger than BLE_GATTS_VAR_ATTR_LEN_MAX (512)
MASTER_BUFFER_SIZE=300

# Default transmission power
# Can be: -40, -20, -16, -12, -8, -4, 0, or 4
TX_POWER=4

# Default advertisement interval, in units of 0.625 ms
# Must be between 32 and 16384
ADVERTISEMENT_INTERVAL=160

# Maximum chip temperature in degrees celsius. Above this, thermal protection kicks in.
MAX_CHIP_TEMP=75

# Time (ms) to wait with during booting
BOOT_DELAY=400

# Connection alive timeout.
# If no valid control command is received within timeout,
# the connection is closed by the device.
# Set to 0 to disable the timeout.
CONNECTION_ALIVE_TIMEOUT=20000

# Twi / i2c defaults (maps to GPIO 0 and 1 by default, see board configuration for which physical pins those are)
TWI_SCL_INDEX=0
TWI_SDA_INDEX=1

GPIO_PIN1_INDEX=-1
GPIO_PIN2_INDEX=-1
GPIO_PIN3_INDEX=-1
GPIO_PIN4_INDEX=-1

BUTTON1_INDEX=-1
BUTTON2_INDEX=-1
BUTTON3_INDEX=-1
BUTTON4_INDEX=-1

LED1_INDEX=-1
LED2_INDEX=-1
LED3_INDEX=-1
LED4_INDEX=-1

# This is the directory where the cross-compiler resides
COMPILER_PATH=

# The compiler type
COMPILER_TYPE=arm-none-eabi-

# The JLink utility (when using the Segger to flash the nRF)
JLINK=/usr/bin/JLinkExe

# The JLink utilty that can be used with gdb
JLINK_GDB_SERVER=/usr/bin/JLinkGDBServer

# The device can be nRF52832_xxAA or nRF52833
# Matches the options of JLink

# TODO: REMOVE, ONLY USE NRF_DEVICE
DEVICE=nRF52832_xxAA

# The particular device
NRF_DEVICE=NRF52832_XXAA

# The device type without specific hardware series suffix
NRF_DEVICE_TYPE=NRF52832

# The device family
NRF_DEVICE_FAMILY=NRF52

# The device series
NRF_DEVICE_SERIES=NRF52_SERIES

# the directory with /Source and /Include subdirectories from the Nordic SDK
NRF5_DIR=

# The nordic sdk version
NORDIC_SDK_VERSION=15
#NORDIC_SDK_VERSION=16

# Starting with SoftDevice S110 v7 there is no separate UICR section
SOFTDEVICE_NO_SEPARATE_UICR_SECTION=1

# Bootloader without debug:
# We actually don't need 0x8000, but it's to reserve some space for future bootloaders.
BOOTLOADER_START_ADDRESS=0x00076000
BOOTLOADER_LENGTH=0x8000
# Bootloader with debug:
#BOOTLOADER_START_ADDRESS=0x00071000
#BOOTLOADER_LENGTH=0xD000


# Has to match values in: bootloader/secure_bootloader_gcc_nrf52.ld
# 0x00080000 - BOOTLOADER_START_ADDRESS - 1000 - 1000 = 6000
# nrf52: length = 0x00080000 - bootloader_start_address - size(bootloader_settings)=0x1000 - size(mbr_params_page)=0x1000


## UICR

# DFU is using the first 4 bytes in the UICR (0x10001080) for DFU INIT checks.
UICR_DFU_INDEX=0

# The second 4 bytes in the UICR (0x10001084) store the hardware board type.
UICR_BOARD_INDEX=1

# The address (in UICR) where the hardware board type is written and read
HARDWARE_BOARD_ADDRESS=0x10001084

# The directory where the softdevice can be found
# change if you want to use a different softdevice than the ones provided in the SDK
# leave undefined for default
# SOFTDEVICE_DIR=
# The name of the directory where the include files resides of the Softdevice, relative to
# the SOFTDEVICE_DIR, leave undefined for default
# SOFTDEVICE_DIR_API=
# The name of the directory where the hex files resides of the Softdevice, relative to
# the SOFTDEVICE_DIR, leave undefined for default
# SOFTDEVICE_DIR_HEX=

# SOFTDEVICE                           - the name of the SoftDevice (without _softdevice.hex)
# SOFTDEVICE_SERIES                    - the series of the SoftDevice (s110 vs s130 e.g.), used in the code
#
# -- TODO: update the text below --
# For the following examples, suppose the SoftDevice takes 80kB and the application 176kB
# APPLICATION_START_ADDRESS            - 80kB corresponds with 0x00014000 hex
# Check https://devzone.nordicsemi.com/question/15994/nrf51822-iram-and-irom-settings-for-v05-s130-sd/
# APPLICATION_LENGTH                   - 176kB corresponds with 0x2c000 hex, should be 0x40000 - 0x14000
# RAM_R1_BASE                          - starting point for softdevice in RAM
# RAM_APPLICATION_AMOUNT               - size of softdevice in RAM

# Default configuration values (will be overruled after setup for example)

SPHERE_ID=0

CROWNSTONE_ID=0

# Duration (in ms) how long the relay pins should be set to high
RELAY_HIGH_DURATION=15

# Hold smartphone close to device to make it toggle from state
TAP_TO_TOGGLE=0

# Tap to toggle uses RSSI values to detect the presence of a phone, this can be offset for a type of Crownstone device
TAP_TO_TOGGLE_RSSI_OFFSET=0

# Recognize switch events in the power supply towards the device
SWITCHCRAFT=0

# Lock the device so it cannot be changed from state by the user
SWITCH_LOCK=0

# Scan for all kind of Bluetooth devices
SCANNER=0

# Wait for zero-crossing to start with dimming (prevents a flash in the start)
START_DIMMER_ON_ZERO_CROSSING=1

# Drop TX power in particular scenarios (an additional security measure)
LOW_TX_POWER=0

# Scale incoming measured voltage levels
VOLTAGE_MULTIPLIER=1

# Scale incoming measured voltage levels
CURRENT_MULTIPLIER=1

# Set zero-crossing threshold
VOLTAGE_ZERO=0

# Set zero-crossing threshold
CURRENT_ZERO=0

# Set zero-crossing threshold
POWER_ZERO=0

# Set dimming temperature threshold
PWM_TEMP_VOLTAGE_THRESHOLD_UP=0

# Set dimming temperature threshold
PWM_TEMP_VOLTAGE_THRESHOLD_DOWN=0

# Set RSSI by default off
ENABLE_RSSI_FOR_CONNECTION=0

#######################################################################################################################
# S132 6.1 (comes with SDK 15)
#######################################################################################################################
SOFTDEVICE_MAJOR=6
SOFTDEVICE_MINOR=1
SOFTDEVICE_SERIES=132
SOFTDEVICE=s132_nrf52_6.1.1

# We get APPLICATION_START_ADDRESS from $NRF5_DIR/config/nrf52832/armgcc/generic_gcc_nrf52.ld
# We repeat them here, but you will have to adjust that file...
# TODO: Copy the relevant files to the local repository again...
APPLICATION_START_ADDRESS=0x00026000

# Bootloader address - application address, so: 0x76000 - 0x26000 - 0x8000 = 0x50000
APPLICATION_LENGTH=0x50000

# Start of RAM for the application
# Find out what the minimal value is by calling nrf_sdh_ble_default_cfg_set() with p_ram_start = 0.
RAM_R1_BASE=0x20002A00

# Amount of RAM for the application: 0x20010000 - RAM_R1_BASE
RAM_APPLICATION_AMOUNT=0xD600

# Amount of RAM required by the bootloader (figure this setting out by enabling debug in the bootloader)
#   CS_SERIAL_BOOTLOADER_NRF_LOG_ENABLED=2
# Then restart with DFU and look for information like this:
#   <warning> nrf_sdh_ble: Insufficient RAM allocated for the SoftDevice.
#   <warning> nrf_sdh_ble: Change the RAM start location from 0x20002380 to 0x20002A98.
#   <warning> nrf_sdh_ble: Maximum RAM size for application is 0x1D568.
# The difference in RAM is 0x718 so we offset the start of RAM for the bootloader with this.
RAM_BOOTLOADER_START_OFFSET=0x718

#######################################################################################################################
# S132 7.0.1 (comes with SDK 16)
#######################################################################################################################
#SOFTDEVICE_MAJOR=7
#SOFTDEVICE_MINOR=0
#SOFTDEVICE_SERIES=132
#SOFTDEVICE=s132_nrf52_7.0.1

# This softdevice (according to release-notes.pdf in SDK files) uses 152 kB (0x26000) flash and 5.6 kB (90x1668) ram 

# We get APPLICATION_START_ADDRESS from $NRF5_DIR/config/nrf52832/armgcc/generic_gcc_nrf52.ld
# We repeat them here, but you will have to adjust that file...
# TODO: This depends on the target nrf52832 vs nrf52833. That is not nice...
# TODO: Copy the relevant files to the local repository again...
#APPLICATION_START_ADDRESS=0x00026000

# Bootloader address - application address, so: 0x76000 - 0x26000 - 0x8000 = 0x50000
#APPLICATION_LENGTH=0x50000

# Start of RAM for the application (from 0x20000000 and up to RAM_R1_BASE it is reserved for the softdevice)
# Find out what the minimal value is by calling nrf_sdh_ble_default_cfg_set() with p_ram_start = 0.
#RAM_R1_BASE=0x200023C0

# On the nRF52833 we have 128kB of RAM, end is at 0x20020000, so the amount of RAM for the application becomes
# 0x20020000 - RAM_R1_BASE = 0x1DC40
#RAM_APPLICATION_AMOUNT=0x1DC40


## To enable all services the gatt attribute table size has to be increased, and in turn, the RAM_R1_BASE and
## RAM_APPLICATION_AMOUNT variables have to be adjusted. Default for the ATTR_TABLE_SIZE is 0x580, so if you
## increase the ATTR_TABLE_SIZE, the RAM_R1_BASE has to be increased by the same value and the RAM_APPLICATION_AMOUNT
## has to be decreased by the same value (and most likely the HEAP_SIZE as well), e.g.
# TODO: Calculate new attr table size, and adjust RAM_R1_BASE accordingly
# WARNING, WARNING
# The following values are not used...
# Adjust them in $BLUENET_DIR/include/third/nrf/generic_gcc_nrf52.ld for now! (adjusted version of $NRF5_DIR/config/nrf52832/armgcc/generic_gcc_nrf52.ld)
ATTR_TABLE_SIZE=0x500
HEAP_SIZE=20000

# Interprocess communication
RAM_BLUENET_IPC_LENGTH=0x100

# Parameters for IPC with the bootloader
BOOTLOADER_IPC_RAM_PROTOCOL=1

# Parameters for the microapps

# Enable the microapp on boot (if set to 0 this will need to be done over the air)
AUTO_ENABLE_MICROAPP_ON_BOOT=0

# The start of microapps in flash
FLASH_MICROAPP_BASE=0x69000

# The number of pages for microapps (each page is 0x1000 / 4096 bytes)
FLASH_MICROAPP_PAGES=2

# The amount of RAM it is allowed to use (microapp is placed before IPC ram, and grows down).
RAM_MICROAPP_AMOUNT=0x800

